@use './variables' as *;


@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@200;300;400;600;700&family=Roboto&display=swap');

/* WebKit (Safari, Chrome) */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-thumb {
    background-color: #223E5B;
    border-radius: 6px;
}

/* Firefox */
::-moz-scrollbar {
    width: 8px;
}

::-moz-scrollbar-thumb {
    background-color: #223E5B;
    border-radius: 6px;
}

/* Microsoft Edge and IE */
::-ms-scrollbar {
    width: 8px;
}

::-ms-scrollbar-thumb {
    background-color: #223E5B;
    border-radius: 6px;
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;

}

body,
html {
    font-family: 'Montserrat', sans-serif;
    font-family: 'Roboto', sans-serif;

    height: 100%;
    overflow-y: hidden;
}

a {
    color: $lightblue;
    outline: none;

    &:hover{
        cursor: pointer;
    }
    &:is(:hover, :active, :focus) {
        color: $lightblue;
    }
}

.sims-input {
    all: unset;
    border: 1px solid $darkblue;
    &.ng-invalid.ng-touched{
        border-color: $red;
    }
    background-color: $offwhite;
    border-radius: 4px;
    height: 1.7rem;
    padding: .3rem;

    &:hover {
        border-color: $lightblue;
        &:is(button, input[type="button"]){
            cursor: pointer;
        }

    }
    &:disabled{
        cursor: not-allowed;
    }

    &:is(select) {
        cursor: pointer;
        display: flex;
        align-items: center;

        &,
        option {
            text-transform: lowercase;
        }
    }
}

.sims-arrow{
    &:is(button){
        width: 4rem;
        aspect-ratio: 1/1;
        font-size: 1.6rem;
        display: flex;
        align-items: center;
        justify-content: center;
        color: $darkblue;
        //border: 2px solid $darkblue;
        border: none;
        outline: none;
        border-radius: 50%;

        box-shadow: 0 0 20px $darkblue;
        background: transparent;
        &>i{
            background: transparent;
            mix-blend-mode: color-burn;
        }

        cursor: pointer;
        &:disabled,&[disabled]{
            cursor: not-allowed;
            opacity: .5;
            border-color: rgba($color: $darkblue, $alpha: .5);
        }
    }
}

.sims-button {
    all: unset;
    color: $white;
    background-color: $lightblue;
    border-radius: 4px;
    height: 1.7rem;
    padding: .3rem 2rem;
    cursor: pointer;

    &:hover {
        filter: brightness(.9);
    }
}

.sims-error{
    position: relative;
    color: $red;
    background-color: $offwhite;
    
    $size: 32px;
    i{
        
        position: absolute;
        top: calc($size / 2 * -1);
        left: calc(50% - ($size / 2));
        border-radius: 50%;
        background-color: white;
        font-size: $size;
    }
    p{
        text-align: center;
        border: 1px solid $red;
        border-radius: 4px;
        padding: calc($size / 2) 0 calc($size / 4) 0;
        font-size: 1.1rem;
        font-weight: 200;
    }
}

.goback {
    width: 100%;
    display: flex;
    justify-content: center;
    a{
        font-size: 1.3rem;
        i{
            transform: rotate(-90deg);
        }
    }
}
.icon-button{
    border: none;
    background: none;
    font-size: 1.2rem;
}
.pointer{
    cursor: pointer;
}
.red{
    color: $red;
}
.green{
    color: $green;
}
.lightblue{
    color: $lightblue;
}

.row{
    display: flex;
    flex-direction: row;
}
.f-12{flex: 12;}
.f-11{flex: 11;}
.f-10{flex: 10;}
.f-9{flex: 9;}
.f-8{flex: 8;}
.f-7{flex: 7;}
.f-6{flex: 6;}
.f-5{flex: 5;}
.f-4{flex: 4;}
.f-3{flex: 3;}
.f-2{flex: 2;}
.f-1{flex: 1;}

.test{border: 1px solid red}

